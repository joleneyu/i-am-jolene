<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>I am Jolene - side project</title><link href="https://joleneyu.github.io/i-am-jolene/" rel="alternate"></link><link href="https://joleneyu.github.io/i-am-jolene/feeds/side-project.atom.xml" rel="self"></link><id>https://joleneyu.github.io/i-am-jolene/</id><updated>2021-09-11T17:05:00+10:00</updated><entry><title>Save Your AWS Costs by StackJanitor</title><link href="https://joleneyu.github.io/i-am-jolene/side-project-3.html" rel="alternate"></link><published>2021-09-11T14:04:00+10:00</published><updated>2021-09-11T17:05:00+10:00</updated><author><name>Jolene Yu</name></author><id>tag:joleneyu.github.io,2021-09-11:/i-am-jolene/side-project-3.html</id><summary type="html">&lt;p&gt;Have you ever worried about the costs related to CloudFormation Stacks? I know CloudFormation is basically free, but the resources created by CloudFormation Stacks are NOT! In a commercial development environment, there could be tons of non-used stacks are up and running every day! &lt;/p&gt;
&lt;p&gt;I found an open-source project - StackJanitor …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Have you ever worried about the costs related to CloudFormation Stacks? I know CloudFormation is basically free, but the resources created by CloudFormation Stacks are NOT! In a commercial development environment, there could be tons of non-used stacks are up and running every day! &lt;/p&gt;
&lt;p&gt;I found an open-source project - StackJanitor which solves this problem easily. It has 2 major mechanisms. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;StackJanitor automatically adds all of the CloudFormation stacks that you create in your AWS account to a DynamoDB table. If you have specified a stacktag &lt;em&gt;stackjanitor&lt;/em&gt; to &lt;em&gt;enabled&lt;/em&gt;, StackJanitor will add your CloudFormation Stack to DynamoDB, setting a TTL field on it to 7 days (this is the default, but can be changed). When the DynamoDB row expires and deletes the row, a lambda function is then triggered that deletes your stack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;StackJanitor can also delete stacks using either a Github or Bitbucket webhook. It uses merged pull request events to trigger the webhook so that they can quickly delete stacks as part of the development workflow.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This open-source project had an open issue of not cleaning up stacks properly sometimes. They require someone to add a fallback mechanism that can remove stacks older than a certain date with the &lt;em&gt;stackjanitor:enabled&lt;/em&gt; tag on the stack.&lt;/p&gt;
&lt;p&gt;To optimise this situation, I recently updated an additional handler to periodically scan and delete old stacks. It's currently under review but I think the outcome is quite cheering. I've learned a lot in this project which I would like to share! &lt;a href="https://github.com/joleneyu/StackJanitor"&gt;Here is the repo for this project&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;What I've done:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Everything was new to me: Serverless Framework, TypeScript, Compiling, JavaScript, Unit Testing. Even just add one single handler was a huge task for me. So I took my first step to read existing code! But TypeScpirt is an object-oriented programme language that is quite different from Python. Compare to JavaScript, most developers find TS is simpler to work with because of its features of strict data type definition and prompt error message when you are writing code. I hope these features helped me as others which didn't happen! So I took a beginner course in TypeScript.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally I could write some functions with TypeScript! I started to appreciate the hints it provided and I could adjust my code while I was writing it. After I wrote the optional handler, I started to run the handler to test out with CloudFormation stacks. Everything worked fine at this stage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The next step was unit testing. The concept was fairly easy - you pass variables to the functions you are testing and compare with expecting results with the function results. I had a problem with the last function which performs deleting stacks. The problem is I only want to mock delete actions when I run the tests instead of deleting the real stacks. I used the mocking modular for AWS SDK which uses Sinon.JS to create robust stubs in place of the SDK calls. Unit tests end up perfect.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Source code looks great. So I moved on to deploy the Lambda function to AWS. Here I have to modify the "serverless.yml" file to add the additional function. At first, I messed up with the event schedule as I didn't put the right syntax to Cron. (&lt;strong&gt;&lt;em&gt;Learning point&lt;/em&gt;&lt;/strong&gt; - Always read through the documentation for what you didn't know!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Okay, the final step would be to tidy up the code and make sure all the changes are necessary by comparing with the base code from Git history! Thank God, I did this, because I found out I accidentally delete the &lt;em&gt;delete function&lt;/em&gt; in the source code!! I added the lines back but a big question mark raised up of why my unit testing didn't fail? (I did run unit tests before I did this tidy up step.) Then I went back to the test file and spent half a day figuring out the problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;ForEach&lt;/em&gt;&lt;/strong&gt; function can’t work properly with &lt;strong&gt;&lt;em&gt;expect&lt;/em&gt;&lt;/strong&gt; function&lt;/li&gt;
&lt;li&gt;Define functions with &lt;strong&gt;&lt;em&gt;locally scoped variables&lt;/em&gt;&lt;/strong&gt;. Unit tests won’t pick up globally scoped variables when you only import functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then submit the pull request and all done! &lt;/p&gt;</content><category term="side project"></category><category term="serverless"></category><category term="typescript"></category><category term="unit test"></category></entry><entry><title>Build Up Your Own Blog - Step by Step (2)</title><link href="https://joleneyu.github.io/i-am-jolene/side-project-2.html" rel="alternate"></link><published>2021-07-26T14:04:00+10:00</published><updated>2021-08-04T17:05:00+10:00</updated><author><name>Jolene Yu</name></author><id>tag:joleneyu.github.io,2021-07-26:/i-am-jolene/side-project-2.html</id><summary type="html">&lt;p&gt;Continue from the first step, this one will show some custom settings on your website, which includes adding new pages with images, and menu modification.&lt;/p&gt;
&lt;h3&gt;Let's go:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Add a new page&lt;/strong&gt; - Open your terminal, create a directory "pages" under "content", and create a Markdown file yourpage.md.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ cd ~/Desktop/yoursitename …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Continue from the first step, this one will show some custom settings on your website, which includes adding new pages with images, and menu modification.&lt;/p&gt;
&lt;h3&gt;Let's go:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Add a new page&lt;/strong&gt; - Open your terminal, create a directory "pages" under "content", and create a Markdown file yourpage.md.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ cd ~/Desktop/yoursitename/content  
$ mkdir pages  
$ touch pages/yourpage.md  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Edit the new page&lt;/strong&gt; - Open your code editor, and modify the page as you like. Metadata syntax for Markdown posts should follow the  pattern below. More metadata description can be found &lt;a href="https://docs.getpelican.com/en/latest/content.html#articles-and-pages"&gt;here&lt;/a&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Title: About me  
Date: 2021-07-26 14:04  
Modified: 2021-07-26 15:05  
Category: About  
Tags: pages  
Slug: about-me  
Authors: Jolene Yu  
Summary: Information about me  

This is the page of my super blog post.  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Add a cover to your page&lt;/strong&gt; - Create a directory "images" under "content", and put the image you are happy to use in that directory. You can add a line to yourpage.md, starting with an exclamation mark (!), followed by alt text in brackets, and the path or URL to the image asset in parentheses. You can optionally add a title after the URL in the parentheses.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;![image info](./images/name.jpg &amp;quot;title&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But the image won't automatically &lt;strong&gt;zoom in &amp;amp; out&lt;/strong&gt; when the page size changes. Luckily, you could just use some HTML in your Markdown, so I add the line below.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;image info&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./images/name.jpg&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;zoom&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;70%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or you could use a custom CSS file to do the same, but it involves making modification to the "themes" directory which I try to aviod. You could explore more &lt;a href="https://stackoverflow.com/questions/255170/markdown-and-image-alignment#answer-5054055"&gt;here&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Clean the menu links&lt;/strong&gt; - Use VS code global search with the short cut "cmd+shift+f" to locate the menu links setting. It's in the LINKS section of pelicanconf.py, you can modify the links where to redirect or simply remove them. I commented them out since I might use them later on.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="image info" src="./images/links.png" data-action="zoom" width="50%"&gt;&lt;/p&gt;
&lt;h3&gt;Lessons-Learned:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I haven't used markdown, html or css before. It took me a while to figure out how markdown works. Follow the official instruction first, and if it's not working, break down the error and locate the real issue.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pages or Articles are edited in a similar way. I created my blogs in a seperate directory "/content/articles". Here is a Markdown format documentation for you to read if you need to modify pages or articles later: &lt;a href="https://www.markdownguide.org/basic-syntax/"&gt;Markdown&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="side project"></category><category term="pelican"></category><category term="html"></category></entry><entry><title>Build Up Your Own Blog - Step by Step (1)</title><link href="https://joleneyu.github.io/i-am-jolene/side-project-1.html" rel="alternate"></link><published>2021-07-25T14:04:00+10:00</published><updated>2021-08-04T17:05:00+10:00</updated><author><name>Jolene Yu</name></author><id>tag:joleneyu.github.io,2021-07-25:/i-am-jolene/side-project-1.html</id><summary type="html">&lt;p&gt;The website you are browsing is my first side project which leveraged a static site generator - Pelican. This blog is about  steps on how to install Pelican and some lesson-learned while I was building up mine site. &lt;a href="https://github.com/joleneyu/i-am-jolene"&gt;Here is the repo for this project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pelican is powered by python and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The website you are browsing is my first side project which leveraged a static site generator - Pelican. This blog is about  steps on how to install Pelican and some lesson-learned while I was building up mine site. &lt;a href="https://github.com/joleneyu/i-am-jolene"&gt;Here is the repo for this project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pelican is powered by python and requires no database or server-side logic which is easier for beginners.&lt;/p&gt;
&lt;h3&gt;Before you start:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Have python, pip3, and git installed  &lt;/li&gt;
&lt;li&gt;Choose a Pelican theme you like (&lt;a href="https://github.com/nairobilug/pelican-alchemy"&gt;here is the one I used&lt;/a&gt;)  &lt;/li&gt;
&lt;li&gt;Create a new repository at GitHub or any other git repository management for this project. (Strongly recommend to use GitHub, because this tutorial has further steps for GitHub Pages and GitHub Actions) &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;When you are ready with the prerequisites, let's jump to how to kickstart a website.&lt;/h3&gt;
&lt;p&gt;Install pelican  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pip3 install pelican
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install Markdown if you plan on using Markdown as a markup format&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pip3 install Markdown
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create a directory to house the site content and configuration files, which can be located any place you prefer&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ mkdir ~/Desktop/yoursitename  
$ cd ~/Desktop/yoursitename
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run the pelican-quickstart command, which will ask some questions about your site (Those settings can be changed anytime after in the configuration file, so don't worry too much here!)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ pelican-quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Follow the theme installtion instruction, which is avaiable in the GitHub repository README.md, and add the theme folder as a submodule&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ mkdir themes  
$ git submodule add https://github.com/nairobilug/pelican-alchemy themes/pelican-alchemy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you are ready to generate and serve your site locally at &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ make devserver  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After this tutorial, you should see a locally served template site like this! Don't worry if your site is missing some images or menu settings, we can figure those things out later!  &lt;/p&gt;
&lt;p&gt;Don't forget to use git to sync your local repository with the remote one. You can always find the old version if you messed up some settings later.   &lt;/p&gt;
&lt;p&gt;&lt;img alt="This one is just a literal element" src="https://joleneyu.github.io/i-am-jolene/images/default.png" data-action="zoom" width="100%"&gt;&lt;/p&gt;
&lt;h3&gt;Lessons-Learned:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The tutorial looks quite straight-forward, sometimes when I don't understand something 100%, I look for more information on google which is time-consuming. I advise trying it out first. Hit a command and see what the terminal says.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you are not sure about some settings, make smaller changes instead of multiple changes at the same time. Make small changes, this makes identifying problems quicker.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use .gitignore wisely. I'm using VS code as my code editor, and it shows when I have some uncommit/unstaged changes even if I didn't change anything. I found out .DS_Store was the problem, and it's safe to untrack this file. I saved a lot of effort for context switching after I put it to .gitignore.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Submodule is another repository from the site repository, it needs to sync seperately.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="side project"></category><category term="pelican"></category><category term="python"></category><category term="git"></category></entry></feed>